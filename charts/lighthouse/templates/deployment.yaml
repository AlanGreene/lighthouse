{{- if .Values.knativeDeploy }}
{{- else }}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    draft: {{ default "draft-app" .Values.draft }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        draft: {{ default "draft-app" .Values.draft }}
        app: {{ template "fullname" . }}
{{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
      volumes:
        - name: config-yaml
          configMap:
            name: config
        - name: plugins-yaml
          configMap:
            name: plugins
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
          - /lighthouse
        args:
          - --config-file
          - /config/config.yaml
          - --plugin-file
          - /config/plugins.yaml
        env:
          - name: "BOT_NAME"
            value: "{{ .Values.git.botName }}"
          - name: "GIT_KIND"
            value: "{{ .Values.git.kind }}"
          - name: "GIT_SERVER"
            value: "{{ .Values.git.server }}"
          - name: "GIT_TOKEN"
            value: "{{ .Values.git.token }}"
          - name: "HMAC_TOKEN"
            value: "{{ .Values.git.hmacToken }}"
          - name: "JX_LOG_FORMAT"
            value: "json"
{{- range $pkey, $pval := .Values.env }}
        - name: {{ $pkey }}
          value: {{ quote $pval }}
{{- end }}
        volumeMounts:
          - name: config-yaml
            mountPath: /config/config.yaml
            subPath: config.yaml
          - name: plugins-yaml
            mountPath: /config/plugins.yaml
            subPath: plugins.yaml
        ports:
        - containerPort: {{ .Values.service.internalPort }}
        livenessProbe:
          httpGet:
            path: {{ .Values.probePath }}
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        readinessProbe:
          httpGet:
            path: {{ .Values.probePath }}
            port: {{ .Values.service.internalPort }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
{{- end }}
